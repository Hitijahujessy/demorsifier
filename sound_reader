from os.path import join as pjoin

import matplotlib.pyplot as plt
import numpy as np
import soundfile as sf
from scipy.io import wavfile

data_dir = "sounds/imports"
old_wav = pjoin(data_dir, 'Wet willy.wav')
new_wav = pjoin(data_dir, 'new.wav')

# Transform the audio file into a readable wav file
data, samplerate = sf.read(old_wav)
sf.write(new_wav, data, samplerate, subtype='PCM_16')


samplerate, data = wavfile.read(new_wav)
print(f"number of channels = {data.shape[1]}")
length = data.shape[0] / samplerate
print(f"length = {length}s")


peak = max(data[:, 0])
valley = min(data[:, 0])


def get_period(data):
    start = None
    end = None
    for index, value in enumerate(data[:, 0]):
        if value == peak and start is None:
            start = index

        elif value == peak and start is not None:
            end = index

        if start and end:
            val = data[:, 0][(end - start) + index]
            if val == peak:
                return (end - start)
            else:
                start, end = None, None


period = get_period(data)
print(period / samplerate)

def get_list_of_peaks(data, peak):
    peak_list = []
    
    for index, value in enumerate(data[:, 0]):
        if value == peak:
            peak_list.append(index)
    
    return peak_list

peak_list = get_list_of_peaks(data, peak)

value = 0
total_value = 0
tv_list = []
for pos in peak_list:
    if pos+period in peak_list:
        value += period
    else:
        if value != 0:
            total_value += value
        elif total_value:
            tv_list.append(total_value)
            total_value = 0
        else:
            pass
            #print(f"pos: {pos}")
        value = 0

dit = min(tv_list)
dah = max(tv_list)
print(tv_list)
print(f"dit = {dit} and dah = {dah}")

        
def get_1st_and_2nd_lowest_value(peak_list):
    minv1 = min(peak_list)
    minv2 = min([val for val in peak_list if val != minv1])
    print(f"minv1 == {minv1} | minv2 == {minv2}")
    return minv1, minv2


# peak_minv1, peak_minv2 = get_1st_and_2nd_lowest_value(peak_list)


time = np.linspace(0., length, data.shape[0])
plt.plot(time, data[:, 0], label="Left channel")
plt.plot(time, data[:, 1], label="Right channel")
# plt.plot(time_list)
plt.legend()
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.show()
