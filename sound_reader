from os.path import join as pjoin

import matplotlib.pyplot as plt
import numpy as np
import soundfile as sf
from scipy.io import wavfile

data_dir = "sounds/imports"
old_wav = pjoin(data_dir, 'sos.wav')
new_wav = pjoin(data_dir, 'new.wav')

# Transform the audio file into a readable wav file
data, samplerate = sf.read(old_wav)
sf.write(new_wav, data, samplerate, subtype='PCM_16')


samplerate, data = wavfile.read(new_wav)
print(f"number of channels = {data.shape[1]}")
length = data.shape[0] / samplerate
print(f"length = {length}s")


peak = max(data[:, 0])
valley = min(data[:, 0])

def get_peaks(data, largest_value):
    peak_list = []
    pos_list = []
    a=0
    b=0
    for i in data[:, 0]:
        if i == largest_value:
            try:
                if a != peak_list[-1]:
                    peak_list.append(a)
                    pos_list.append(b)
            except IndexError:
                peak_list.append(a)
                pos_list.append(b)
            a=0
        else:
            a+=1
        b+=1
    return peak_list, pos_list

peak_list, peak_pos_list = get_peaks(data, peak)
valley_list, valley_pos_list = get_peaks(data, valley)
peaks_data = [[peak_pos_list, peak_list], [valley_pos_list, valley_list]]

def get_1st_and_2nd_lowest_value(peak_list):
    minv1 = min(peak_list)
    minv2 = min([val for val in peak_list if val != minv1])
    print(f"minv1 == {minv1} | minv2 == {minv2}")
    return minv1,minv2

peak_minv1, peak_minv2 = get_1st_and_2nd_lowest_value(peak_list)

def add_up_peaks(peaks_data, minv1, minv2):
    dict1 = {}
    dict2 = {}
    t = [item for item in peaks_data[0]]
    for item, value in zip(t[0], t[1]):
        dict1[item] = value
    t = [item for item in peaks_data[1]]
    for item, value in zip(t[0], t[1]):
        dict2[item] = value
    dict1.update(dict2)
    return dict1
            
peak_dict = add_up_peaks(peaks_data, peak_minv1, peak_minv2)


time = np.linspace(0., length, data.shape[0])
plt.plot(time, data[:, 0], label="Left channel")
plt.plot(time, data[:, 1], label="Right channel")
#plt.plot(time_list)
plt.legend()
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.show()